name: Create SLSA File 2.0
on:
  - workflow_dispatch

permissions: read-all

env:
  GH_TOKEN: ${{ github.token }}
  ISSUE_REPOSITORY: ${{ github.repository }}
jobs:
  usetrw:
    permissions:
      contents: write
      id-token: write
      actions: read   # For the entrypoint.
      packages: write
    uses: AdamKorcz/slsa-github-generator/.github/workflows/builder_maven_slsa3.yml@maven2
  publish:
    needs: [usetrw]
    permissions:
      contents: write
      id-token: write
      actions: read   # For the entrypoint.
      packages: write
    steps:
      - name: Run publisher
        uses: AdamKorcz/slsa-github-generator/.github/workflows/publish_maven.yml@maven2
        with:
          maven-username: "${{ secrets.OSSRH_USERNAME }}"
          maven-password: ${{ secrets.OSSRH_PASSWORD }}
          gpg-key-pass: ${{ secrets.GPG_PASSPHRASE }}
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
#    needs: [usetrw]
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Java for publishing to Maven Central Repository
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#          server-id: ossrh
#          server-username: MAVEN_USERNAME
#          server-password: MAVEN_PASSWORD
#          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
#          gpg-passphrase: GPG_KEY_PASS
#      
#          
#      - name: Download the target dir
#        uses: actions/download-artifact@v3
#        with:
#          name: target
#      - name: Download the slsa attestation
#        uses: actions/download-artifact@v3
#        with:
#          name: slsa-attestations
#          path: slsa-attestations
#          
#      - name: Publish to the Maven Central Repository
#        run: |
#          # Build and run custom plugin
#          cd plugin && mvn clean install && cd ..
#          # Re-indexing the secondary jar files for deploy
#          mvn javadoc:jar source:jar
#          # Retrieve project version
#          VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
#          # Reset the environment variables add in the base provenance
#          FILES=slsa-attestations/test-java-project-$VERSION.jar.intoto.sigstore
#          TYPES=sigstore
#          CLASSIFIERS=jar.intoto
#          # Find all necessary built jar files and attach them to the enviornment variable deploy
#          for name in $(find ./ -name "test-java-project-$VERSION-*.jar")
#          do
#            TARGET=$(echo $name | rev | cut -d\- -f1 | rev)
#            FILES=$FILES,$name
#            TYPES=$TYPES,${TARGET##*.}
#            CLASSIFIERS=$CLASSIFIERS,${TARGET%.*}
#          done
#          # Find all generated provenance files and attach them the the envionrment variable for deploy
#          for name in $(find ./ -name "test-java-project-$VERSION-*.jar.intoto.sigstore")
#          do
#            TARGET=$(echo $name | rev | cut -d\- -f1 | rev)
#            FILES=$FILES,$name
#            TYPES=$TYPES",sigstore"
#            CLASSIFIERS=$CLASSIFIERS,${TARGET::-9}
#          done
#          # Sign and deploy the files to the ossrh remote repository
#          mvn validate jar:jar -Dfile=target/test-java-project-$VERSION.jar -Durl=https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/ -DrepositoryId=ossrh -Dfiles=$FILES -Dtypes=$TYPES -Dclassifiers=$CLASSIFIERS -DpomFile=pom.xml gpg:sign-and-deploy-file
#        env:
#          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
#          GPG_KEY_PASS: ${{ secrets.GPG_PASSPHRASE }}
